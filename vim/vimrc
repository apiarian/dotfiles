let $PATH = $HOME . '/.vim/gopath:' . $PATH

source ~/.vim/packages.vim

let g:deoplete#enable_at_startup = 1

set nocompatible

" all the plugin detection and stuff
filetype plugin indent on

" enable syntax in terminals which can display colors
if has('syntax') && (&t_Co > 2)
	syntax enable
	let g:solarized_termcolors=16
	colorscheme solarized
	set background=dark
endif

" command line completion
set wildmode=list:longest,full
set wildignorecase

" where are we?
set showmode
set showcmd

" indentation controls
set shiftwidth=2
set tabstop=2
set softtabstop=2
set noexpandtab
set shiftround
set autoindent
set smartindent

" don't reformat text automatically
set formatoptions-=t

set textwidth=79

" spelling
set spelllang=en_us

" reload files edited externally automatically
set autoread

" highlight search stuff
set hlsearch

" hidden buffers hang around
set hidden

" let embedded terminals know that they're embedded
let $VIMTERM = '(vim)'

" start with all folds open
set foldlevelstart=100

" split in the right direction
set splitbelow
set splitright

" break long things
set linebreak

" completion
set completeopt=longest,menuone

"
" handy bindings
"

" space to insert a character
nmap <Space> i_<Esc>r

" Y to yank to the end of the line from the cursor
map Y y%

" let backspace span lines
set backspace=2

" better movement
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" jump around windows
 nnoremap <Right> <C-w>l
 nnoremap <Left> <C-w>h
 nnoremap <Up> <C-w>k
 nnoremap <Down> <C-w>j

" move lines
nmap mj ddp
nmap mk dd<Up>P
nmap mJ ddGp
nmap mK ddggP

" search next and center
nnoremap n nzz
nnoremap N Nzz

" quick escape
inoremap jk <Esc>

" enable mouse
set mouse=a

"
" interface improvements
"

" vertically resize window when it's just one line high, toggles between
" fullscreen windows
function! ToggleWindowSize()
	if winheight(0) == 1
		resize
	endif
	if winwidth(0) == 1
		vertical resize
	endif
endfunction
autocmd WinEnter * :call ToggleWindowSize()

" status line
set laststatus=2
set statusline=%F%m%r%{fugitive#statusline()}%h%w\%=%y[L:\%l\ C:\%c\ A:\%b\ H:\x%02B\ P:\%p%%]

" show invisibles

set list
set listchars=tab:▸\ ,eol:¬

set colorcolumn=81

" line numbers
function! NumberToggle()
	if(&relativenumber == 1)
		set norelativenumber
	else
		set relativenumber
	endif
endfunc
nnoremap <C-n> :call NumberToggle()<cr>

" switch color setup
noremap <silent> <Leader>bd :set background=dark<CR>
noremap <silent> <Leader>bl :set background=light<CR>

"
" custom settings for some file types
"

" human text files
autocmd BufNewFile,BufRead *.txt set filetype=human
autocmd FileType mail,human set formatoptions+=t  textwidth=72 spell
autocmd FileType human setlocal foldmethod=expr
autocmd FileType human setlocal foldexpr=(getline(v:lnum)=~'^$')?-1:((indent(v:lnum)<indent(v:lnum+1))?('>'.indent(v:lnum+1)):indent(v:lnum))
autocmd FileType human set foldtext=getline(v:foldstart)
autocmd FileType human set fillchars=fold:\ 

" makefiles
autocmd FileType make set noexpandtab shiftwidth=8

" markdown
autocmd BufNewFile,BufRead *.markdown set filetype=markdown
autocmd FileType markdown set formatoptions=tcroqn2 comments=n:&gt; ai textwidth=80 spell
let g:markdown_fold_style = 'nested'

" rust
let g:rustfmt_autosave = 1
let g:racer_cmd = expand('$HOME/.cargo/bin/racer')
let g:racer_experimental_completer = 1
" let g:syntastic_rust_checkers = ["rustc"]

" go

let g:go_bin_path=expand("$HOME/.vim/gopath")
autocmd FileType go setlocal foldmethod=syntax
function! s:build_go_files()
        let l:file = expand('%')
        if l:file =~# '^\f\+_test\.go$'
                call go#test#Test(0,1)
        elseif l:file =~# '^\f\+\.go$'
                call go#cmd#Build(0)
        endif
endfunction
let g:go_fmt_command = "goimports"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_fail_silently = 0
let g:go_fmt_experimental = 1
let g:go_list_type = "quickfix"
let g:go_auto_type_info = 1
let g:go_updatetime = 500
" let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
" let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>tf <Plug>(go-test-func)
au FileType go nmap <leader>tc <Plug>(go-test-compile)
au FileType go nmap <leader>c <Plug>(go-coverage-toggle)
au FileType go nmap <leader>v <Plug>(go-vet)
au FileType go nmap <leader>l :GoLint<CR>
au FileType go nmap <leader>ds <Plug>(go-def-split)
au FileType go nmap <leader>dv <Plug>(go-def-vertical)
au FileType go nmap <leader>dt <Plug>(go-def-tab)
au FileType go nmap <leader>gd <Plug>(go-doc)
au FileType go nmap <leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <leader>gb <Plug>(go-doc-browser)
au FileType go nmap <leader>e <Plug>(go-rename)
au FileType go nmap <leader>a <Plug>(go-alternate-edit)
au FileType go nmap <leader>av <Plug>(go-alternate-vertical)
au FileType go nmap <leader>as <Plug>(go-alternate-split)
au FileType go nmap <leader>i <Plug>(go-info)
set autowrite " write before GoBuild and the like
let g:ctrlp_custom_ignore = '\v([\/]\.(git|hg|svn)$)|([\/]vendor/.*)'
let g:deoplete#sources#go#gocode_binary = expand("$HOME/.vim/gopath/gocode")

"
" Set gvim stuff
" 

if has("gui_running")
	if has("gui_macvim")
		:set guifont=Andale\ Mono:h14
		colorscheme solarized
		set background=dark
		set guioptions-=r
		set guioptions-=R
		set guioptions-=b
		set guioptions-=l
		set guioptions-=L
	endif
endif
